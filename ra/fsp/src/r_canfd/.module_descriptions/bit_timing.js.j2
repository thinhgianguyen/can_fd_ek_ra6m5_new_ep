/* "struct" to hold bit settings */
function BitSettings(prescaler, tseg1, tseg2, sjw, bitrate, ratio)
{
    this.prescaler = prescaler;
    this.tseg1 = tseg1;
    this.tseg2 = tseg2;
    this.sjw = sjw;
    this.bitrate = bitrate;
    this.ratio = ratio;
}

/* Function to deep copy bit settings without access to Object.assign */
function BitSettingsCopy(dest, src)
{
    dest.prescaler = src.prescaler;
    dest.tseg1 = src.tseg1;
    dest.tseg2 = src.tseg2;
    dest.sjw = src.sjw;
    dest.bitrate = src.bitrate;
    dest.ratio = src.ratio;
}

var data_best = new BitSettings(0, 0, 0, 0, 0, 0);
var nominal_best = new BitSettings(0, 0, 0, 0, 0, 0);

var clock = ${board.clock.peripheral.canfd};
var manual_mode = ${module.driver.{{ id_name() }}.bitrate.manual.use_manual};
if(manual_mode)
{
    /* Manual bitrate inputs */
    nominal_best.prescaler = ${module.driver.{{ id_name() }}.manual.nominal.prescaler};
    nominal_best.tseg1 = ${module.driver.{{ id_name() }}.manual.nominal.time_segment_1};
    nominal_best.tseg2 = ${module.driver.{{ id_name() }}.manual.nominal.time_segment_2};
    nominal_best.sjw = ${module.driver.{{ id_name() }}.manual.nominal.sync_jump_width};
    nominal_best.bitrate = clock / nominal_best.prescaler / (nominal_best.tseg1 + nominal_best.tseg2 + 1);
    nominal_best.ratio = (nominal_best.tseg1 + 1) / (nominal_best.tseg1 + nominal_best.tseg2 + 1);
    data_best.prescaler = ${module.driver.{{ id_name() }}.manual.data.prescaler};
    data_best.tseg1 = ${module.driver.{{ id_name() }}.manual.data.time_segment_1};
    data_best.tseg2 = ${module.driver.{{ id_name() }}.manual.data.time_segment_2};
    data_best.sjw = ${module.driver.{{ id_name() }}.manual.data.sync_jump_width};
    data_best.bitrate = clock / data_best.prescaler / (data_best.tseg1 + data_best.tseg2 + 1);
    data_best.ratio = (data_best.tseg1 + 1) / (data_best.tseg1 + data_best.tseg2 + 1);
}
else
{
    /* Automatic bitrate inputs */
    var nominal_rate_requested = ${module.driver.{{ id_name() }}.bitrate.automatic.nominal_rate};
    var data_rate_requested = ${module.driver.{{ id_name() }}.bitrate.automatic.data_rate};
    var req_ratio = ${module.driver.{{ id_name() }}.bitrate.automatic.sample_point};
    var delay_compensation = ${module.driver.{{ id_name() }}.bitrate.automatic.delay_compensation};

    var data = new BitSettings(0, 0, 0, 0, 0, 0);
    var nominal = new BitSettings(0, 0, 0, 0, 0, 0);

    /* Loop over all available prescalers */
    for(prescaler = 1; prescaler <= 1024; prescaler++)
    {
        /* Calculate bit clock */
        bit_clock = clock / prescaler;

        /* Stop searching if the bit clock is too slow to meet time quantum requirements */
        if(bit_clock < (8 * nominal_rate_requested))
        {
            break;
        }

        /* Calculate nominal bitrate parameters */
        nominal.prescaler = prescaler;
        nominal_tq = Math.round(bit_clock / nominal_rate_requested);
        nominal.tseg1 = Math.round(nominal_tq * (req_ratio / 100.0)) - 1;
        nominal.tseg2 = nominal_tq - (nominal.tseg1 + 1);

        /* Adjust time segments if segment 2 is too small */
        if(nominal.tseg2 < 2)
        {
            nominal.tseg1 -= 2 - nominal.tseg2;
            nominal.tseg2 += 2 - nominal.tseg2;
        }

        if((nominal.tseg1 > 256) || (nominal.tseg2 > 128))
        {
            /* Skip out-of-range time segment values */
            nominal_better = false;
            nominal_delta = 1;
        }
        else
        {
            /* Calculate remaining parameters and auxiliary info */
            nominal.sjw = (nominal.tseg2 >= 10) ? 4 : 1;
            nominal.bitrate = bit_clock / nominal_tq;
            nominal.ratio = (nominal.tseg1 + 1) / (nominal.tseg1 + nominal.tseg2 + 1);
            nominal_delta = Math.abs(nominal.bitrate - nominal_rate_requested);
            nominal_better = nominal_delta < Math.abs(nominal_best.bitrate - nominal_rate_requested);
        }

        /* Calculate data bitrate parameters */
        data.prescaler = prescaler;
        data_tq = Math.round(bit_clock / data_rate_requested);
        data.tseg1 = Math.round(data_tq * (req_ratio / 100.0)) - 1;
        data.tseg2 = data_tq - (data.tseg1 + 1);

        /* Adjust time segments if segment 2 is too small */
        if(data.tseg2 < 2)
        {
            data.tseg1 -= 2 - data.tseg2;
            data.tseg2 += 2 - data.tseg2;
        }

        if((data.tseg1 > 32) || (data.tseg2 > 16) || (bit_clock < (5 * data_rate_requested)) || (prescaler > 256))
        {
            /* Skip out-of-range values */
            data_better = false;
            data_delta = 1;
        }
        else
        {
            /* Calculate remaining parameters and auxiliary info */
            data.sjw = (data.tseg2 >= 10) ? 4 : 1;
            data.bitrate = bit_clock / data_tq;
            data.ratio = (data.tseg1 + 1) / (data.tseg1 + data.tseg2 + 1);
            data_delta = Math.abs(data.bitrate - data_rate_requested);
            data_better = data_delta < Math.abs(data_best.bitrate - data_rate_requested);

            /* If a higher prescaler results in a better data bitrate then update nominal as well to ensure data prescaler <= nominal */
            nominal_better = nominal_better | data_better;
        }

        if(data_better)
        {
            /* When delay compensation is on only update data rate parameters when prescaler is <= 2 */
            if(!(delay_compensation && (prescaler > 2)))
            {
                BitSettingsCopy(data_best, data);
            }
        }

        if(nominal_better)
        {
            BitSettingsCopy(nominal_best, nominal);
        }

        /* Check to see if all required bitrates are exact */
        if((0 == nominal_delta) && (0 == data_delta))
        {
            break;
        }
    }
}

bit_timing_cfg = "" +
    "can_bit_timing_cfg_t ${module.driver.{{ id_name() }}.name}_bit_timing_cfg =\\n" +
    "{\\n" +
    "    /* Actual bitrate: " + nominal_best.bitrate.toFixed(0) + " Hz. Actual sample point: "+ nominal_best.ratio.toFixed(2) * 100 +" %. */\\n" +
    "    .baud_rate_prescaler = " + nominal_best.prescaler.toString() + ",\\n" +
    "    .time_segment_1 = " + nominal_best.tseg1.toString() + ",\\n" +
    "    .time_segment_2 = " + nominal_best.tseg2.toString() + ",\\n" +
    "    .synchronization_jump_width = " + nominal_best.sjw.toString() + "\\n" +
    "};\\n" +
    "\\n" +
    "#if BSP_FEATURE_CANFD_FD_SUPPORT\\n" +
    "can_bit_timing_cfg_t ${module.driver.{{ id_name() }}.name}_data_timing_cfg =\\n" +
    "{\\n" +
    "    /* Actual bitrate: " + data_best.bitrate.toFixed(0) + " Hz. Actual sample point: "+ data_best.ratio.toFixed(2) * 100 +" %. */\\n" +
    "    .baud_rate_prescaler = " + data_best.prescaler.toString() + ",\\n" +
    "    .time_segment_1 = " + data_best.tseg1.toString() + ",\\n" +
    "    .time_segment_2 = " + data_best.tseg2.toString() + ",\\n" +
    "    .synchronization_jump_width = " + data_best.sjw.toString() + "\\n" +
    "};\\n" +
    "#endif\\n";

bit_timing_cfg
